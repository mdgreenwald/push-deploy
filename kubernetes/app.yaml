---
apiVersion: v1
kind: Namespace
metadata:
  name: push-deploy

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: push-deploy-config
  namespace: push-deploy
data:
  FLASK_ENV: development
  PD_REGISTRY: docker.io/
  PD_USER: deploy_user

  config.py: |
    import os
    basedir = os.path.abspath(os.path.dirname(__file__))

---
apiVersion: v1
kind: Secret
metadata:
  name: push-deploy-secrets
  namespace: push-deploy
type: Opaque
data:
  PD_SECRET_KEY: dXNDdUtuclFiU0ZjbkE1eEJjalBKZHFTRGFTQmlrVkFwUmJFT2xtZlhzbDRPQXdSVXZhalVqc2NXNEVjdzZ2Yw==
  PD_PASSWORD: cGFzc3dvcmQ=

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: push-deploy
  namespace: push-deploy

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: deployments-list-patch-clusterrole
  namespace: push-deploy
rules:
- apiGroups: ["", "apps"]
  resources: ["deployments"]
  verbs: ["list", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: deployments-list-patch-role
  namespace: push-deploy
rules:
- apiGroups: ["", "apps"]
  resources: ["deployments"]
  verbs: ["list", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: deployments-list-patch-role-binding
  namespace: push-deploy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: deployments-list-patch-role
subjects:
  - kind: ServiceAccount
    name: push-deploy
    namespace: push-deploy

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: deployments-list-patch-clusterrole-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: deployments-list-patch-clusterrole
subjects:
  - kind: ServiceAccount
    name: push-deploy
    namespace: push-deploy

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: push-deploy
  namespace: push-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: push-deploy
  template:
    metadata:
      labels:
        app: push-deploy
    spec:
      serviceAccountName: push-deploy
      containers:
      - image: push-deploy:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        readinessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 6
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 14
          periodSeconds: 10
        command: ["gunicorn"]
        args: ["-w", "4", "--access-logfile", "-", "--error-logfile", "-", "-b", "0.0.0.0", "wsgi:app"]
        name: push-deploy
        envFrom:
        - configMapRef:
            name: push-deploy-config
        - secretRef:
            name: push-deploy-secrets
        volumeMounts:
        - name: config-volume
          mountPath: /opt/push-deploy/instance/config.py
          subPath: config.py
        resources:
          requests:
            memory: "192Mi"
            cpu: "50m"
          limits:
            memory: "320Mi"
            cpu: "250m"
      volumes:
        - name: config-volume
          configMap:
            name: push-deploy-config
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: push-deploy
  namespace: push-deploy
  labels:
    app: push-deploy
spec:
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
  selector:
    app: push-deploy

---
